/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
		//writing into A
    Mux16(a=instruction, b=ALUOutput, sel=instruction[15], out=afterMux);
    Not(in=instruction[15], out=changeA);
	
	
	//determine of writing into D, A, M
	And16(a=true, b=instruction, out[3..5]=sel);
	DMux8Way(in=true, sel=sel, a=write1, b=write2, c=write3, d=write4, e=write5, f=write6, g=write7, h=write8);
	Or(a=write3, b=write4, out=DReg1);
	Or(a=write7, b=write8, out=DReg2);
	Or(a=DReg1, b=DReg2, out=DRegPart);
    And(a=DRegPart, b=instruction[15], out=DReg);
	Or(a=write5, b=write6, out=AReg1);
	Or(a=write8, b=write7, out=AReg2);
	Or(a=AReg1, b=AReg2, out=ARegPart);
    Or(a=ARegPart, b=changeA, out=AReg);
	Or(a=write2, b=write4, out=MReg1);
	Or(a=write6, b=write8, out=MReg2);
	Or(a=MReg1, b=MReg2, out=writeM1);
    And(a=writeM1, b=instruction[15], out=writeM);
	
	
	
	DRegister(in=ALUOutput, load=DReg, out=dout);
	ARegister(in=afterMux, load=AReg, out[0..14]=addressM, out=aout); // todo check that it not should be out[0..14]
	
	
    Mux16(a=aout, b=inM, sel=instruction[12], out=aluMux);
	
	
	
	
	ExtendAlu(x=dout, y=aluMux, instruction=instruction[6..14], out=ALUOutput, zr=zero, ng=negative);
	And16(a=true, b=ALUOutput, out=outM);
	
	//determine if we want to jump or not
	DMux8Way(in=true, sel=instruction[0..2], a=NOTJump, b=JGT, c=JEQ, d=JGE,e=JLT,f=JNE,g=JLE, h=JMP);
    
    Not(in=zero, out=notZero);
	
	// Handle JGT
    Not(in=negative, out=notNegative);
	And(a=notZero, b=notNegative, out=jmp1);
    And(a=JGT, b=jmp1, out=jump1);
	
	// Handle JGE
	//Not(in=negative, out=positive);
	//Or(a=positive, b=zero, out=jge2);
	And(a=notNegative, b=JGE, out=jump2);
	
	// Handle JEQ
	And(a=zero, b=JEQ, out=jump3);
	
	//Handle JLT
	And(a=negative, b=JLT, out=jump4);
	
	//Handle JLE
	Or(a=negative, b=zero, out=jle2);
	And(a=jle2, b=JLE, out=jump5);
	
	// Handle JNE
	And(a=notZero, b=JNE, out=jump6);
	
	//determine if we want to jump!
	Or8Way(in[0]=jump1, in[1]=jump2, in[2]=jump3, in[3]=jump4, in[4]=jump5, in[5]=jump6, in[6]=JMP, in[7]=false, out=toJumpPart);
    And(a=toJumpPart, b=instruction[15], out=toJump);
	PC(in=aout, load=toJump, inc=true, reset=reset, out[0..14]=pc);
	 
}
